// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Tests using 'i' to go into 'insert mode' and putting a string into A1.
        /// </summary>
        public void TestBasics2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFormWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UIFormWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIFormWindow = ApplicationUnderTest.Launch(this.TestBasics2Params.UIFormWindowExePath, this.TestBasics2Params.UIFormWindowAlternateExePath);

            // Type 'i' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestBasics2Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'hello' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.TestBasics2Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.TestBasics2Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Tests adding something
        /// </summary>
        public void TestBasics3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFormWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UIFormWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIFormWindow = ApplicationUnderTest.Launch(this.TestBasics3Params.UIFormWindowExePath, this.TestBasics3Params.UIFormWindowAlternateExePath);

            // Type 'i' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestBasics3Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'hello' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.TestBasics3Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.TestBasics3Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type 'k' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestBasics3Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Tests to see if a formula can be entered
        /// </summary>
        public void TestBasics4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFormWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UIFormWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Type 'jjli' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestBasics4Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=A1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.TestBasics4Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.TestBasics4Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type 'k' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestBasics4Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Tests changing a cell that contains a formula.
        /// </summary>
        public void TestBasics5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIFormWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UIFormWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Type 'kkhhi' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestBasics5Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '3' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.TestBasics5Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.TestBasics5Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type 'jl' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestBasics5Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Tests to make sure the cell contents are empty after pressing enter (moving to a new cell).
        /// </summary>
        public void TestContentsTextBox()
        {
            #region Variable Declarations
            WinEdit uIContentsTextBoxEdit = this.UIFormWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Verify that the 'ControlType' property of 'contentsTextBox' text box equals ''
            Assert.AreEqual(this.TestContentsTextBoxExpectedValues.UIContentsTextBoxEditControlType, uIContentsTextBoxEdit.ControlType.ToString(), "Contents were not equal, expected an empty string.");
        }
        
        /// <summary>
        /// Makes sure a string is saved in the contents.
        /// </summary>
        public void TestContentsTextBox1()
        {
            #region Variable Declarations
            WinEdit uIContentsTextBoxEdit = this.UIFormWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Verify that the 'ControlType' property of 'contentsTextBox' text box equals 'hello'
            Assert.AreEqual(this.TestContentsTextBox1ExpectedValues.UIContentsTextBoxEditControlType, uIContentsTextBoxEdit.ControlType.ToString(), "Contents were not equal, expecting <hello>.");
        }
        
        /// <summary>
        /// Tests exiting or something.
        /// </summary>
        public void TestExiting1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIFormWindow.UIFormTitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 2));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(33, 15));
        }
        
        /// <summary>
        /// Tests to make sure a formula updates after updating one of it's dependents.
        /// </summary>
        public void TestFormula1()
        {
            #region Variable Declarations
            WinEdit uIValueTextBoxEdit = this.UIFormWindow.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'ControlType' property of 'valueTextBox' text box equals '3'
            Assert.AreEqual(this.TestFormula1ExpectedValues.UIValueTextBoxEditControlType, uIValueTextBoxEdit.ControlType.ToString(), "Expected <3>");
        }
        
        /// <summary>
        /// Tests getting a formula error.
        /// </summary>
        public void TestFormulaError1()
        {
            #region Variable Declarations
            WinEdit uIContentsTextBoxEdit = this.UIFormWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Verify that the 'ControlType' property of 'contentsTextBox' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.TestFormulaError1ExpectedValues.UIContentsTextBoxEditControlType, uIContentsTextBoxEdit.ControlType.ToString(), "Expected <SpreadsheetUtilities.FormulaError>");
        }
        
        #region Properties
        public virtual TestBasics2Params TestBasics2Params
        {
            get
            {
                if ((this.mTestBasics2Params == null))
                {
                    this.mTestBasics2Params = new TestBasics2Params();
                }
                return this.mTestBasics2Params;
            }
        }
        
        public virtual TestBasics3Params TestBasics3Params
        {
            get
            {
                if ((this.mTestBasics3Params == null))
                {
                    this.mTestBasics3Params = new TestBasics3Params();
                }
                return this.mTestBasics3Params;
            }
        }
        
        public virtual TestBasics4Params TestBasics4Params
        {
            get
            {
                if ((this.mTestBasics4Params == null))
                {
                    this.mTestBasics4Params = new TestBasics4Params();
                }
                return this.mTestBasics4Params;
            }
        }
        
        public virtual TestBasics5Params TestBasics5Params
        {
            get
            {
                if ((this.mTestBasics5Params == null))
                {
                    this.mTestBasics5Params = new TestBasics5Params();
                }
                return this.mTestBasics5Params;
            }
        }
        
        public virtual TestContentsTextBoxExpectedValues TestContentsTextBoxExpectedValues
        {
            get
            {
                if ((this.mTestContentsTextBoxExpectedValues == null))
                {
                    this.mTestContentsTextBoxExpectedValues = new TestContentsTextBoxExpectedValues();
                }
                return this.mTestContentsTextBoxExpectedValues;
            }
        }
        
        public virtual TestContentsTextBox1ExpectedValues TestContentsTextBox1ExpectedValues
        {
            get
            {
                if ((this.mTestContentsTextBox1ExpectedValues == null))
                {
                    this.mTestContentsTextBox1ExpectedValues = new TestContentsTextBox1ExpectedValues();
                }
                return this.mTestContentsTextBox1ExpectedValues;
            }
        }
        
        public virtual TestFormula1ExpectedValues TestFormula1ExpectedValues
        {
            get
            {
                if ((this.mTestFormula1ExpectedValues == null))
                {
                    this.mTestFormula1ExpectedValues = new TestFormula1ExpectedValues();
                }
                return this.mTestFormula1ExpectedValues;
            }
        }
        
        public virtual TestFormulaError1ExpectedValues TestFormulaError1ExpectedValues
        {
            get
            {
                if ((this.mTestFormulaError1ExpectedValues == null))
                {
                    this.mTestFormulaError1ExpectedValues = new TestFormulaError1ExpectedValues();
                }
                return this.mTestFormulaError1ExpectedValues;
            }
        }
        
        public UIFormWindow UIFormWindow
        {
            get
            {
                if ((this.mUIFormWindow == null))
                {
                    this.mUIFormWindow = new UIFormWindow();
                }
                return this.mUIFormWindow;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestBasics2Params mTestBasics2Params;
        
        private TestBasics3Params mTestBasics3Params;
        
        private TestBasics4Params mTestBasics4Params;
        
        private TestBasics5Params mTestBasics5Params;
        
        private TestContentsTextBoxExpectedValues mTestContentsTextBoxExpectedValues;
        
        private TestContentsTextBox1ExpectedValues mTestContentsTextBox1ExpectedValues;
        
        private TestFormula1ExpectedValues mTestFormula1ExpectedValues;
        
        private TestFormulaError1ExpectedValues mTestFormulaError1ExpectedValues;
        
        private UIFormWindow mUIFormWindow;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestBasics2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestBasics2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIFormWindowExePath = "C:\\Users\\greg\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIFormWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'i' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "i";
        
        /// <summary>
        /// Type 'hello' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestBasics3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestBasics3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIFormWindowExePath = "C:\\Users\\greg\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIFormWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'i' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "i";
        
        /// <summary>
        /// Type 'hello' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'k' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "k";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestBasics4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestBasics4Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'jjli' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "jjli";
        
        /// <summary>
        /// Type '=A1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'k' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "k";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestBasics5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestBasics5Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'kkhhi' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "kkhhi";
        
        /// <summary>
        /// Type '3' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'jl' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "jl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestContentsTextBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestContentsTextBoxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'contentsTextBox' text box equals ''
        /// </summary>
        public string UIContentsTextBoxEditControlType = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestContentsTextBox1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestContentsTextBox1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'contentsTextBox' text box equals 'hello'
        /// </summary>
        public string UIContentsTextBoxEditControlType = "hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestFormula1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestFormula1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'valueTextBox' text box equals '3'
        /// </summary>
        public string UIValueTextBoxEditControlType = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestFormulaError1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestFormulaError1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'contentsTextBox' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UIContentsTextBoxEditControlType = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFormWindow : WinWindow
    {
        
        public UIFormWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form");
            this.WindowTitles.Add("Form*");
            #endregion
        }
        
        #region Properties
        public UIContentsTextBoxWindow UIContentsTextBoxWindow
        {
            get
            {
                if ((this.mUIContentsTextBoxWindow == null))
                {
                    this.mUIContentsTextBoxWindow = new UIContentsTextBoxWindow(this);
                }
                return this.mUIContentsTextBoxWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIFormTitleBar UIFormTitleBar
        {
            get
            {
                if ((this.mUIFormTitleBar == null))
                {
                    this.mUIFormTitleBar = new UIFormTitleBar(this);
                }
                return this.mUIFormTitleBar;
            }
        }
        
        public UIValueTextBoxWindow UIValueTextBoxWindow
        {
            get
            {
                if ((this.mUIValueTextBoxWindow == null))
                {
                    this.mUIValueTextBoxWindow = new UIValueTextBoxWindow(this);
                }
                return this.mUIValueTextBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIContentsTextBoxWindow mUIContentsTextBoxWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIFormTitleBar mUIFormTitleBar;
        
        private UIValueTextBoxWindow mUIValueTextBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContentsTextBoxWindow : WinWindow
    {
        
        public UIContentsTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsTextBox";
            this.WindowTitles.Add("Form");
            this.WindowTitles.Add("Form*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsTextBoxEdit
        {
            get
            {
                if ((this.mUIContentsTextBoxEdit == null))
                {
                    this.mUIContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents:";
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Form");
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Form*");
                    #endregion
                }
                return this.mUIContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Form*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form*");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFormTitleBar : WinTitleBar
    {
        
        public UIFormTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form*");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form*");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIValueTextBoxWindow : WinWindow
    {
        
        public UIValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueTextBox";
            this.WindowTitles.Add("Form*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueTextBoxEdit
        {
            get
            {
                if ((this.mUIValueTextBoxEdit == null))
                {
                    this.mUIValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUIValueTextBoxEdit.WindowTitles.Add("Form*");
                    #endregion
                }
                return this.mUIValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITestSpreadsheetsListItem UITestSpreadsheetsListItem
        {
            get
            {
                if ((this.mUITestSpreadsheetsListItem == null))
                {
                    this.mUITestSpreadsheetsListItem = new UITestSpreadsheetsListItem(this);
                }
                return this.mUITestSpreadsheetsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestSpreadsheetsListItem mUITestSpreadsheetsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITestSpreadsheetsListItem : WinListItem
    {
        
        public UITestSpreadsheetsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Test Spreadsheets";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
}
