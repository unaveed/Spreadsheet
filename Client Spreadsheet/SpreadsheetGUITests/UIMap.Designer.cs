// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Tests inputting a string
        /// </summary>
        public void Test1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UISheet1Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISheet1Window = ApplicationUnderTest.Launch(this.Test1Params.UISheet1WindowExePath, this.Test1Params.UISheet1WindowAlternateExePath);

            // Type 'i' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'hello' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test1Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test1Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test1Params.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type 'k' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test1Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Tests correct contents
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIContentsTextBoxEdit = this.UISheet1Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentsTextBox' text box equals 'hello'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIContentsTextBoxEditText, uIContentsTextBoxEdit.Text, "Expected \"hello\"");
        }
        
        /// <summary>
        /// Tests putting in a number and a formula
        /// </summary>
        public void Test2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UISheet1Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Type 'jjlli' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test2Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '35' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test2Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test2Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '=C3*4' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test2Params.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test2Params.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test2Params.UIContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Type 'k' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test2Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Tests correct formula
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIContentsTextBoxEdit = this.UISheet1Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'contentsTextBox' text box equals '=C3*4'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIContentsTextBoxEditText, uIContentsTextBoxEdit.Text, "Expected =C3*4");
        }
        
        /// <summary>
        /// Tests correct formula value
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uIValueTextBoxEdit = this.UISheet1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'valueTextBox' text box equals '140'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "Expected 140");
        }
        
        /// <summary>
        /// Tests circular dependencies
        /// </summary>
        public void Test3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UISheet1Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinClient uISpreadsheetPanel1Client1 = this.UISheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type 'jjhhi' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test3Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=B1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test3Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test3Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Right}{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test3Params.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type 'lki' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test3Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type '=C1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test3Params.UIContentsTextBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(224, 139));

            // Type '=D1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test3Params.UIContentsTextBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(293, 145));

            // Type '=A1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test3Params.UIContentsTextBoxEditText3;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test3Params.UIContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Type '{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test3Params.UIContentsTextBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// Closes spreadsheet
        /// </summary>
        public void Test4()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISheet1Window.UISheet1TitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 7));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(55, 12));
        }
        
        /// <summary>
        /// Runs through some basic methods
        /// </summary>
        public void Test5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinEdit uIContentsTextBoxEdit = this.UISheet1Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinMenuItem uIOpenMenuItem = this.UISheet1Window.UIMenuStrip2MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox1 = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uICloseButton = this.UINewssWindow.UINewssTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISheet1Window.UISheet1TitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISheet1Window = ApplicationUnderTest.Launch(this.Test5Params.UISheet1WindowExePath, this.Test5Params.UISheet1WindowAlternateExePath);

            // Type 'Control + s' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test5Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.Control);

            // Select 'new' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Test5Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(48, 13));

            // Type 'i' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test5Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type 'hello' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test5Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test5Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type 'Control + s' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test5Params.UIContentsTextBoxEditSendKeys1, ModifierKeys.Control);

            // Type 'Control, Shift + s' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test5Params.UIContentsTextBoxEditSendKeys2, (ModifierKeys.Control | ModifierKeys.Shift));

            // Select 'new1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Test5Params.UIFilenameComboBoxEditableItem1;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(35, 16));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(43, 9));

            // Select 'new.ss' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.Test5Params.UIFilenameComboBoxEditableItem2;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(23, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(22, 10));
        }
        
        /// <summary>
        /// Tests invalid files
        /// </summary>
        public void Test6()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISheet1Window.UIMenuStrip2MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinList uIItemsViewList = this.UIOpenWindow.UIShellViewClient.UIItemsViewList;
            WinMenuItem uITextDocumentMenuItem = this.UIItemWindow.UINewMenuItem.UITextDocumentMenuItem;
            WinEdit uIItemEdit = this.UIOpenWindow.UIItemWindow11.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIOpenWindow.UIItemWindow12.UIItemEdit;
            WinListItem uITesttxtListItem = this.UIOpenWindow.UIItemWindow2.UIItemsViewList.UITesttxtListItem;
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanel1Client = this.UISheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UISheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinComboBox uISaveastypeComboBox = this.UISaveAsWindow.UIDetailsPanePane.UISaveastypeComboBox;
            WinListItem uIAllfilesListItem = this.UIItemWindow1.UISaveastypeList.UIAllfilesListItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISheet1Window = ApplicationUnderTest.Launch(this.Test6Params.UISheet1WindowExePath, this.Test6Params.UISheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(58, 13));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(21, 9));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.Test6Params.UIFilesoftypeComboBoxSelectedItem;

            // Right-Click 'Items View' list box
            Mouse.Click(uIItemsViewList, MouseButtons.Right, ModifierKeys.None, new Point(209, 279));

            // Click 'New' -> 'Text Document' menu item
            Mouse.Click(uITextDocumentMenuItem, new Point(67, 10));

            // Type 'test.txt' in text box
            uIItemEdit.Text = this.Test6Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit1, this.Test6Params.UIItemEditSendKeys, ModifierKeys.None);

            // Double-Click 'test.txt' list item
            Mouse.DoubleClick(uITesttxtListItem, new Point(59, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(234, 120));

            // Type 'Control, Shift + s' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.Test6Params.UISpreadsheetPanel1ClientSendKeys, (ModifierKeys.Control | ModifierKeys.Shift));

            // Select 'All files (*.*)' in 'Save as type:' combo box
            uISaveastypeComboBox.SelectedItem = this.Test6Params.UISaveastypeComboBoxSelectedItem;

            // Type 'hell' in 'All files (*.*)' list item
            Keyboard.SendKeys(uIAllfilesListItem, this.Test6Params.UIAllfilesListItemSendKeys, ModifierKeys.None);

            // Select 'hello.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Test6Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(52, 21));
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISheet1Window.UISheet1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 2));
        }
        
        /// <summary>
        /// Run through more basic functionality
        /// </summary>
        public void Test7()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UISheet1Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinClient uISpreadsheetPanel1Client1 = this.UISheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIFormulaFormatExceptiWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISheet1Window.UISheet1TitleBar.UICloseButton;
            WinButton uIYesButton = this.UISpreadsheetWindow.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            WinButton uICancelButton1 = this.UISpreadsheetWindow.UICancelWindow.UICancelButton;
            WinMenuItem uISaveMenuItem = this.UISheet1Window.UIMenuStrip2MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow.UITestSpreadsheetsListItem.UINameEdit;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISheet1Window = ApplicationUnderTest.Launch(this.Test7Params.UISheet1WindowExePath, this.Test7Params.UISheet1WindowAlternateExePath);

            // Type 'i' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test7Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=B1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test7Params.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test7Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(141, 43));

            // Type '=A1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test7Params.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test7Params.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(33, 17));

            // Type '=D1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test7Params.UIContentsTextBoxEditText2;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test7Params.UIContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Type '' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test7Params.UIContentsTextBoxEditText3;

            // Type '{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test7Params.UIContentsTextBoxEditSendKeys3, ModifierKeys.None);

            // Type 'klki' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test7Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type '=A`' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test7Params.UIContentsTextBoxEditText4;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test7Params.UIContentsTextBoxEditSendKeys4, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton1, this.Test7Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '=A5' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test7Params.UIContentsTextBoxEditText5;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test7Params.UIContentsTextBoxEditSendKeys5, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(18, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(33, 13));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(45, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 4));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(44, 11));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(46, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(75, 11));

            // Select 'new.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Test7Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(55, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(40, 12));
        }
        
        /// <summary>
        /// More basics
        /// </summary>
        public void Test8()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISheet1Window.UIMenuStrip2MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIFileMenuItem = this.UISheet2Window.UIMenuStrip2MenuBar.UIFileMenuItem;
            WinMenuItem uIExitMenuItem = this.UISheet1Window.UIMenuStrip2MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinMenuItem uIHowtouseMenuItem = this.UISheet2Window.UIMenuStrip2MenuBar.UIHelpMenuItem.UIHowtouseMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanel1Client = this.UISheet2Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIContentsTextBoxEdit = this.UISheet2Window.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinButton uIOKButton1 = this.UIFormulaFormatExceptiWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISheet2Window.UISheet2TitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISheet1Window = ApplicationUnderTest.Launch(this.Test8Params.UISheet1WindowExePath, this.Test8Params.UISheet1WindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(48, 15));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(26, 11));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(59, 10));

            // Click 'Help' -> 'How to use' menu item
            Mouse.Click(uIHowtouseMenuItem, new Point(31, 18));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(10, 14));

            // Type '{Tab}i' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test8Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=A`' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test8Params.UIContentsTextBoxEditText;

            // Type '{Tab}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test8Params.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton1, this.Test8Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '3' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test8Params.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test8Params.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test8Params.UIContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Type 'ljkhhkli' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test8Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type 'hello' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test8Params.UIContentsTextBoxEditText2;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test8Params.UIContentsTextBoxEditSendKeys3, ModifierKeys.None);

            // Type '' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test8Params.UIContentsTextBoxEditText3;

            // Type '{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test8Params.UIContentsTextBoxEditSendKeys4, ModifierKeys.None);

            // Type 'ki' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.Test8Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Type '=A1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.Test8Params.UIContentsTextBoxEditText4;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test8Params.UIContentsTextBoxEditSendKeys5, ModifierKeys.None);

            // Type '{Escape}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.Test8Params.UIContentsTextBoxEditSendKeys6, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 7));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(45, 12));
        }
        
        #region Properties
        public virtual Test1Params Test1Params
        {
            get
            {
                if ((this.mTest1Params == null))
                {
                    this.mTest1Params = new Test1Params();
                }
                return this.mTest1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual Test2Params Test2Params
        {
            get
            {
                if ((this.mTest2Params == null))
                {
                    this.mTest2Params = new Test2Params();
                }
                return this.mTest2Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual Test3Params Test3Params
        {
            get
            {
                if ((this.mTest3Params == null))
                {
                    this.mTest3Params = new Test3Params();
                }
                return this.mTest3Params;
            }
        }
        
        public virtual Test5Params Test5Params
        {
            get
            {
                if ((this.mTest5Params == null))
                {
                    this.mTest5Params = new Test5Params();
                }
                return this.mTest5Params;
            }
        }
        
        public virtual Test6Params Test6Params
        {
            get
            {
                if ((this.mTest6Params == null))
                {
                    this.mTest6Params = new Test6Params();
                }
                return this.mTest6Params;
            }
        }
        
        public virtual Test7Params Test7Params
        {
            get
            {
                if ((this.mTest7Params == null))
                {
                    this.mTest7Params = new Test7Params();
                }
                return this.mTest7Params;
            }
        }
        
        public virtual Test8Params Test8Params
        {
            get
            {
                if ((this.mTest8Params == null))
                {
                    this.mTest8Params = new Test8Params();
                }
                return this.mTest8Params;
            }
        }
        
        public UISheet1Window UISheet1Window
        {
            get
            {
                if ((this.mUISheet1Window == null))
                {
                    this.mUISheet1Window = new UISheet1Window();
                }
                return this.mUISheet1Window;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UINewssWindow UINewssWindow
        {
            get
            {
                if ((this.mUINewssWindow == null))
                {
                    this.mUINewssWindow = new UINewssWindow();
                }
                return this.mUINewssWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIFormulaFormatExceptiWindow UIFormulaFormatExceptiWindow
        {
            get
            {
                if ((this.mUIFormulaFormatExceptiWindow == null))
                {
                    this.mUIFormulaFormatExceptiWindow = new UIFormulaFormatExceptiWindow();
                }
                return this.mUIFormulaFormatExceptiWindow;
            }
        }
        
        public UISheet2Window UISheet2Window
        {
            get
            {
                if ((this.mUISheet2Window == null))
                {
                    this.mUISheet2Window = new UISheet2Window();
                }
                return this.mUISheet2Window;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        #endregion
        
        #region Fields
        private Test1Params mTest1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private Test2Params mTest2Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private Test3Params mTest3Params;
        
        private Test5Params mTest5Params;
        
        private Test6Params mTest6Params;
        
        private Test7Params mTest7Params;
        
        private Test8Params mTest8Params;
        
        private UISheet1Window mUISheet1Window;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UINewssWindow mUINewssWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIErrorWindow mUIErrorWindow;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIFormulaFormatExceptiWindow mUIFormulaFormatExceptiWindow;
        
        private UISheet2Window mUISheet2Window;
        
        private UIHelpWindow mUIHelpWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Test1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowExePath = "C:\\Users\\greg\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'i' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "i";
        
        /// <summary>
        /// Type 'hello' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Escape}";
        
        /// <summary>
        /// Type 'k' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "k";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentsTextBox' text box equals 'hello'
        /// </summary>
        public string UIContentsTextBoxEditText = "hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Test2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'jjlli' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "jjlli";
        
        /// <summary>
        /// Type '35' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "35";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=C3*4' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "=C3*4";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "{Escape}";
        
        /// <summary>
        /// Type 'k' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "k";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'contentsTextBox' text box equals '=C3*4'
        /// </summary>
        public string UIContentsTextBoxEditText = "=C3*4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'valueTextBox' text box equals '140'
        /// </summary>
        public string UIValueTextBoxEditText = "140";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Test3Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'jjhhi' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "jjhhi";
        
        /// <summary>
        /// Type '=B1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=B1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Right}{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Right}{Escape}";
        
        /// <summary>
        /// Type 'lki' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "lki";
        
        /// <summary>
        /// Type '=C1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "=C1";
        
        /// <summary>
        /// Type '=D1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText2 = "=D1";
        
        /// <summary>
        /// Type '=A1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText3 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys3 = "{Escape}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Test5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowExePath = "C:\\Users\\greg\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Control + s' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "s";
        
        /// <summary>
        /// Select 'new' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "new";
        
        /// <summary>
        /// Type 'i' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "i";
        
        /// <summary>
        /// Type 'hello' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "s";
        
        /// <summary>
        /// Type 'Control, Shift + s' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "s";
        
        /// <summary>
        /// Select 'new1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "new1";
        
        /// <summary>
        /// Select 'new.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "new.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Test6Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowExePath = "C:\\Users\\greg\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        
        /// <summary>
        /// Type 'test.txt' in text box
        /// </summary>
        public string UIItemEditText = "test.txt";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control, Shift + s' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "s";
        
        /// <summary>
        /// Select 'All files (*.*)' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSelectedItem = "All files (*.*)";
        
        /// <summary>
        /// Type 'hell' in 'All files (*.*)' list item
        /// </summary>
        public string UIAllfilesListItemSendKeys = "hell";
        
        /// <summary>
        /// Select 'hello.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "hello.txt";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Test7Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowExePath = "C:\\Users\\greg\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'i' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "i";
        
        /// <summary>
        /// Type '=B1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=B1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=D1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText2 = "=D1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText3 = "";
        
        /// <summary>
        /// Type '{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys3 = "{Escape}";
        
        /// <summary>
        /// Type 'klki' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "klki";
        
        /// <summary>
        /// Type '=A`' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText4 = "=A`";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A5' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText5 = "=A5";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Select 'new.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "new.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Test8Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowExePath = "C:\\Users\\greg\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheet1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Tab}i' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{Tab}i";
        
        /// <summary>
        /// Type '=A`' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=A`";
        
        /// <summary>
        /// Type '{Tab}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "{Escape}";
        
        /// <summary>
        /// Type 'ljkhhkli' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "ljkhhkli";
        
        /// <summary>
        /// Type 'hello' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText2 = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText3 = "";
        
        /// <summary>
        /// Type '{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys4 = "{Escape}";
        
        /// <summary>
        /// Type 'ki' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "ki";
        
        /// <summary>
        /// Type '=A1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText4 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '{Escape}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys6 = "{Escape}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISheet1Window : WinWindow
    {
        
        public UISheet1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Sheet 1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sheet 1");
            this.WindowTitles.Add("Sheet 1*");
            this.WindowTitles.Add("new.ss");
            this.WindowTitles.Add("new.ss*");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIContentsTextBoxWindow UIContentsTextBoxWindow
        {
            get
            {
                if ((this.mUIContentsTextBoxWindow == null))
                {
                    this.mUIContentsTextBoxWindow = new UIContentsTextBoxWindow(this);
                }
                return this.mUIContentsTextBoxWindow;
            }
        }
        
        public UIValueTextBoxWindow UIValueTextBoxWindow
        {
            get
            {
                if ((this.mUIValueTextBoxWindow == null))
                {
                    this.mUIValueTextBoxWindow = new UIValueTextBoxWindow(this);
                }
                return this.mUIValueTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISheet1TitleBar UISheet1TitleBar
        {
            get
            {
                if ((this.mUISheet1TitleBar == null))
                {
                    this.mUISheet1TitleBar = new UISheet1TitleBar(this);
                }
                return this.mUISheet1TitleBar;
            }
        }
        
        public UIMenuStrip2MenuBar UIMenuStrip2MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip2MenuBar == null))
                {
                    this.mUIMenuStrip2MenuBar = new UIMenuStrip2MenuBar(this);
                }
                return this.mUIMenuStrip2MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIContentsTextBoxWindow mUIContentsTextBoxWindow;
        
        private UIValueTextBoxWindow mUIValueTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISheet1TitleBar mUISheet1TitleBar;
        
        private UIMenuStrip2MenuBar mUIMenuStrip2MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Sheet 1");
            this.WindowTitles.Add("Sheet 1*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet 1");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet 1*");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContentsTextBoxWindow : WinWindow
    {
        
        public UIContentsTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsTextBox";
            this.WindowTitles.Add("Sheet 1");
            this.WindowTitles.Add("Sheet 1*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsTextBoxEdit
        {
            get
            {
                if ((this.mUIContentsTextBoxEdit == null))
                {
                    this.mUIContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents:";
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Sheet 1");
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Sheet 1*");
                    #endregion
                }
                return this.mUIContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIValueTextBoxWindow : WinWindow
    {
        
        public UIValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueTextBox";
            this.WindowTitles.Add("Sheet 1*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueTextBoxEdit
        {
            get
            {
                if ((this.mUIValueTextBoxEdit == null))
                {
                    this.mUIValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUIValueTextBoxEdit.WindowTitles.Add("Sheet 1*");
                    #endregion
                }
                return this.mUIValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Sheet 1*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet 1*");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISheet1TitleBar : WinTitleBar
    {
        
        public UISheet1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Sheet 1*");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Sheet 1*");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStrip2MenuBar : WinMenuBar
    {
        
        public UIMenuStrip2MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip2";
            this.WindowTitles.Add("new.ss");
            this.WindowTitles.Add("Sheet 1*");
            this.WindowTitles.Add("Sheet 1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("new.ss");
            this.WindowTitles.Add("Sheet 1*");
            this.WindowTitles.Add("Sheet 1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("new.ss");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Sheet 1*");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Sheet 1");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Sheet 1");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UICancelWindow1 mUICancelWindow;
        
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        
        public WinComboBox UISaveastypeComboBox
        {
            get
            {
                if ((this.mUISaveastypeComboBox == null))
                {
                    this.mUISaveastypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISaveastypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Save as type:";
                    this.mUISaveastypeComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveastypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        
        private WinComboBox mUISaveastypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITestSpreadsheetsListItem UITestSpreadsheetsListItem
        {
            get
            {
                if ((this.mUITestSpreadsheetsListItem == null))
                {
                    this.mUITestSpreadsheetsListItem = new UITestSpreadsheetsListItem(this);
                }
                return this.mUITestSpreadsheetsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestSpreadsheetsListItem mUITestSpreadsheetsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITestSpreadsheetsListItem : WinListItem
    {
        
        public UITestSpreadsheetsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Test Spreadsheets";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIShellViewClient UIShellViewClient
        {
            get
            {
                if ((this.mUIShellViewClient == null))
                {
                    this.mUIShellViewClient = new UIShellViewClient(this);
                }
                return this.mUIShellViewClient;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIShellViewClient mUIShellViewClient;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow12 mUIItemWindow12;
        
        private UIItemWindow21 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1136";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilesoftypeComboBox
        {
            get
            {
                if ((this.mUIFilesoftypeComboBox == null))
                {
                    this.mUIFilesoftypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilesoftypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Files of type:";
                    this.mUIFilesoftypeComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilesoftypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilesoftypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIShellViewClient : WinClient
    {
        
        public UIShellViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Shell Folder View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "New Text Document.txt";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Edit";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "New Text Document.txt";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Edit";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UITesttxtListItem
        {
            get
            {
                if ((this.mUITesttxtListItem == null))
                {
                    this.mUITesttxtListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUITesttxtListItem.SearchProperties[WinListItem.PropertyNames.Name] = "test.txt";
                    this.mUITesttxtListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUITesttxtListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUITesttxtListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewssWindow : WinWindow
    {
        
        public UINewssWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "new.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("new.ss");
            #endregion
        }
        
        #region Properties
        public UINewssTitleBar UINewssTitleBar
        {
            get
            {
                if ((this.mUINewssTitleBar == null))
                {
                    this.mUINewssTitleBar = new UINewssTitleBar(this);
                }
                return this.mUINewssTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UINewssTitleBar mUINewssTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewssTitleBar : WinTitleBar
    {
        
        public UINewssTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("new.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("new.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UINewMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new UINewMenuItem(this);
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UINewMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewMenuItem : WinMenuItem
    {
        
        public UINewMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UITextDocumentMenuItem
        {
            get
            {
                if ((this.mUITextDocumentMenuItem == null))
                {
                    this.mUITextDocumentMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUITextDocumentMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Text Document";
                    this.mUITextDocumentMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUITextDocumentMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUITextDocumentMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UISaveastypeList UISaveastypeList
        {
            get
            {
                if ((this.mUISaveastypeList == null))
                {
                    this.mUISaveastypeList = new UISaveastypeList(this);
                }
                return this.mUISaveastypeList;
            }
        }
        #endregion
        
        #region Fields
        private UISaveastypeList mUISaveastypeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveastypeList : WinList
    {
        
        public UISaveastypeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Save as type:";
            #endregion
        }
        
        #region Properties
        public WinListItem UIAllfilesListItem
        {
            get
            {
                if ((this.mUIAllfilesListItem == null))
                {
                    this.mUIAllfilesListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAllfilesListItem.SearchProperties[WinListItem.PropertyNames.Name] = "All files (*.*)";
                    #endregion
                }
                return this.mUIAllfilesListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIAllfilesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFormulaFormatExceptiWindow : WinWindow
    {
        
        public UIFormulaFormatExceptiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Formula Format Exception";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Formula Format Exception");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Formula Format Exception");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Formula Format Exception");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISheet2Window : WinWindow
    {
        
        public UISheet2Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Sheet 2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sheet 2");
            this.WindowTitles.Add("Sheet 2*");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip2MenuBar1 UIMenuStrip2MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip2MenuBar == null))
                {
                    this.mUIMenuStrip2MenuBar = new UIMenuStrip2MenuBar1(this);
                }
                return this.mUIMenuStrip2MenuBar;
            }
        }
        
        public UISpreadsheetPanel1Window1 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window1(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIContentsTextBoxWindow1 UIContentsTextBoxWindow
        {
            get
            {
                if ((this.mUIContentsTextBoxWindow == null))
                {
                    this.mUIContentsTextBoxWindow = new UIContentsTextBoxWindow1(this);
                }
                return this.mUIContentsTextBoxWindow;
            }
        }
        
        public UISheet2TitleBar UISheet2TitleBar
        {
            get
            {
                if ((this.mUISheet2TitleBar == null))
                {
                    this.mUISheet2TitleBar = new UISheet2TitleBar(this);
                }
                return this.mUISheet2TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip2MenuBar1 mUIMenuStrip2MenuBar;
        
        private UISpreadsheetPanel1Window1 mUISpreadsheetPanel1Window;
        
        private UIContentsTextBoxWindow1 mUIContentsTextBoxWindow;
        
        private UISheet2TitleBar mUISheet2TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStrip2MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip2MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip2";
            this.WindowTitles.Add("Sheet 2");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("Sheet 2");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Sheet 2");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHowtouseMenuItem
        {
            get
            {
                if ((this.mUIHowtouseMenuItem == null))
                {
                    this.mUIHowtouseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHowtouseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "How to use";
                    this.mUIHowtouseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHowtouseMenuItem.WindowTitles.Add("Sheet 2");
                    #endregion
                }
                return this.mUIHowtouseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHowtouseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetPanel1Window1 : WinWindow
    {
        
        public UISpreadsheetPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Sheet 2");
            this.WindowTitles.Add("Sheet 2*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet 2");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet 2*");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContentsTextBoxWindow1 : WinWindow
    {
        
        public UIContentsTextBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsTextBox";
            this.WindowTitles.Add("Sheet 2");
            this.WindowTitles.Add("Sheet 2*");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsTextBoxEdit
        {
            get
            {
                if ((this.mUIContentsTextBoxEdit == null))
                {
                    this.mUIContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents:";
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Sheet 2");
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Sheet 2*");
                    #endregion
                }
                return this.mUIContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISheet2TitleBar : WinTitleBar
    {
        
        public UISheet2TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Sheet 2*");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Sheet 2*");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
